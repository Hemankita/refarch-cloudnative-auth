sudo: required
language: java
jdk:
  - openjdk8
env:
  global:
    - IMAGE_NAME=bluecompute-auth
    - RELEASE_NAME=auth
    - TAG=travis-latest
    - HS256_KEY=E6526VJkKYhyTFRFMC0pTECpHcZ7TGcq8pKsVVgz9KtESVpheEO284qKzfzg8HpWNBPeHOxNGlyudUHi6i8tFQJXC8PiI48RUpMh23vPDLGD35pCM0417gf58z5xlmRNii56fwRCmIhhV7hDsm3KO2jRv4EBVz7HrYbzFeqI45CaStkMYNipzSm2duuer7zRdMjEKIdqsby0JfpQpykHmC5L6hxkX0BT7XWqztTr6xHCwqst26O0g8r7bXSYjp4a
    - COUCHDB_USER=admin
    - COUCHDB_PASSWORD=passw0rd
    - TEST_USER=testuser
    - TEST_PASSWORD=passw0rd
stages:
  - local build and test
  - docker build, deploy, and test
  - kubernetes build, deploy, and test
jobs:
  include:
    - stage: local build and test
      services:
      - docker
      before_cache:
        - rm -f  $HOME/.gradle/caches/modules-2/modules-2.lock
        - rm -fr $HOME/.gradle/caches/*/plugin-resolution/
      cache:
        directories:
          - $HOME/.gradle/caches/
          - $HOME/.gradle/wrapper/
      before_script:
      # Start CouchDB and Inventory Containers and Create a Test User
      - bash scripts/start_customer.sh $HS256_KEY $COUCHDB_USER $COUCHDB_PASSWORD $TEST_USER $TEST_PASSWORD
      script:
      # Gradle Build
      - ./gradlew build
      # Start Application
      - java -Djwt.sharedSecret=${HS256_KEY} -DcustomerService.url=http://localhost:8081 -Dserver.port=8080 -jar build/libs/micro-auth-0.0.1.jar &
      # Wait for the Inventory container to start accepting connections
      - sleep 25
      # Run Auth API Test
      - bash scripts/api_tests.sh 127.0.0.1 8080 $TEST_USER $TEST_PASSWORD
    - stage: docker build, deploy, and test
      services:
      - docker
      install:
        - true
      before_script:
      # Start CouchDB and Inventory Containers and Create a Test User
      - bash scripts/start_customer.sh $HS256_KEY $COUCHDB_USER $COUCHDB_PASSWORD $TEST_USER $TEST_PASSWORD
      script:
      # Get Customer Container IP Address
      - CUSTOMER_IP_ADDRESS=$(docker inspect customer | jq -r '.[0].NetworkSettings.IPAddress')
      # Build Docker image
      - docker build -t "${IMAGE_NAME}:${TAG}" .
      # Start Auth Container and Connect to Customer Service
      - docker run --name auth -e CUSTOMERSERVICE_URL=http://${CUSTOMER_IP_ADDRESS}:8080 -e HS256_KEY=${HS256_KEY} -p 8080:8080 -d "${IMAGE_NAME}:${TAG}"
      # Wait for the Auth container to start accepting connections
      - sleep 25
      # Check that the Auth container is running
      - docker ps
      # Check logs to see if it started properly
      - docker logs auth
      # Run Auth API Test
      - bash scripts/api_tests.sh 127.0.0.1 8080 $TEST_USER $TEST_PASSWORD
    - stage: kubernetes build, deploy, and test
      services:
      - docker
      env:
      - CHANGE_MINIKUBE_NONE_USER=true
      install:
        - true
      before_script:
      # Install nsenter, which is needed for minikube to work
      - bash scripts/install_nsenter.sh 
      # Download kubectl, which is a requirement for using minikube.
      - curl -LO https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl && chmod +x kubectl && sudo mv kubectl /usr/local/bin/
      # Download minikube.
      - curl -Lo minikube https://storage.googleapis.com/minikube/releases/v0.25.2/minikube-linux-amd64 && chmod +x minikube && sudo mv minikube /usr/local/bin/
      - sudo minikube start --vm-driver=none --kubernetes-version=v1.9.0
      # Fix the kubectl context, as it's often stale.
      - minikube update-context
      # Getting ip for testing
      - minikube ip
      # Wait for Minikube to be up and ready.
      - JSONPATH='{range .items[*]}{@.metadata.name}:{range @.status.conditions[*]}{@.type}={@.status};{end}{end}'; until kubectl get nodes -o jsonpath="$JSONPATH" 2>&1 | grep -q "Ready=True"; do sleep 1; done
      # Set minikube Docker Registry to be the local one
      #- minikube docker-env
      #- eval $(minikube docker-env)
      # Download Helm CLI
      - curl https://raw.githubusercontent.com/kubernetes/helm/master/scripts/get > get_helm.sh && chmod 700 get_helm.sh && ./get_helm.sh && rm get_helm.sh
      # Create Tiller Service Account
      - kubectl -n kube-system create sa tiller && kubectl create clusterrolebinding tiller --clusterrole cluster-admin --serviceaccount=kube-system:tiller
      # Install Helm on Minikube
      - helm init --service-account tiller
      # Wait for helm to be ready
      - until helm list; do echo "waiting for helm to be ready"; sleep 1; done
      # Add bluecompute-charts Helm repos
      - helm repo add ibmcase-charts https://raw.githubusercontent.com/ibm-cloud-architecture/refarch-cloudnative-kubernetes/spring/docs/charts
      script:
      # Get cluster info
      - kubectl cluster-info
      # Build Docker image
      - docker build -t "${IMAGE_NAME}:${TAG}" .
      # Download Auth chart dependencies (MySQL)
      - cd chart/auth; helm dependency update; cd ../..
      # helm lint
      - helm lint chart/auth
      # helm package
      - helm package chart/auth
      # helm install Auth from packaged chart. Use pullPolicy=Never so it uses local docker image
      - CHART_VERSION="$(cat chart/auth/Chart.yaml | grep version | awk '{print $2}')"
      - helm upgrade --install auth --set service.type=NodePort,image.repository="${IMAGE_NAME}",image.tag="${TAG}",image.pullPolicy=Never auth-${CHART_VERSION}.tgz
      # Wait for Auth to be ready
      - kubectl get deployments ${RELEASE_NAME}-auth -o yaml
      - READY=$(kubectl get deployments ${RELEASE_NAME}-auth -o yaml | grep "readyReplicas" | awk '{print $2}')
      - echo $READY
      - until [ -n "$READY" ] && [ ${READY} -ge 1 ]; do READY=$(kubectl get deployments ${RELEASE_NAME}-auth -o yaml | grep "readyReplicas" | awk '{print $2}'); kubectl get deployments -o wide; echo "Waiting for auth to be ready"; sleep 10; done
      # Wait for Auth deployment to start accepting connections
      - sleep 35
      # Run Auth API Test`
      - MINIKUBE_IP=$(minikube ip)
      - NODE_PORT=$(kubectl get service ${RELEASE_NAME}-auth -o=jsonpath='{.spec.ports[0].nodePort}')
      - bash scripts/api_tests.sh $MINIKUBE_IP $NODE_PORT $TEST_USER $TEST_PASSWORD