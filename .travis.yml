sudo: required
language: java
jdk:
  - openjdk8
env:
  global:
    - IMAGE_NAME=bluecompute-auth
    - RELEASE_NAME=auth
    - TAG=travis-latest
    - HS256_KEY=E6526VJkKYhyTFRFMC0pTECpHcZ7TGcq8pKsVVgz9KtESVpheEO284qKzfzg8HpWNBPeHOxNGlyudUHi6i8tFQJXC8PiI48RUpMh23vPDLGD35pCM0417gf58z5xlmRNii56fwRCmIhhV7hDsm3KO2jRv4EBVz7HrYbzFeqI45CaStkMYNipzSm2duuer7zRdMjEKIdqsby0JfpQpykHmC5L6hxkX0BT7XWqztTr6xHCwqst26O0g8r7bXSYjp4a
    - COUCHDB_USER=admin
    - COUCHDB_PASSWORD=passw0rd
    - TEST_USER=testuser
    - TEST_PASSWORD=passw0rd
stages:
  - local build and test
  - docker build, deploy, and test
  - kubernetes build, deploy, and test
jobs:
  include:
    - stage: local build and test
      services:
      - docker
      before_cache:
        - rm -f  $HOME/.gradle/caches/modules-2/modules-2.lock
        - rm -fr $HOME/.gradle/caches/*/plugin-resolution/
      cache:
        directories:
          - $HOME/.gradle/caches/
          - $HOME/.gradle/wrapper/
      before_script:
      # Start CouchDB and Inventory Containers and Create a Test User
      - bash scripts/start_customer.sh $HS256_KEY $COUCHDB_USER $COUCHDB_PASSWORD $TEST_USER $TEST_PASSWORD
      script:
      # Gradle Build
      - ./gradlew build
      # Start Application
      - java -Djwt.sharedSecret=${HS256_KEY} -DcustomerService.url=http://localhost:8082 -Dserver.port=8083 -jar build/libs/micro-auth-0.0.1.jar &
      # Wait for the Inventory container to start accepting connections
      - sleep 25
      # Run Auth API Test
      - bash scripts/api_tests.sh 127.0.0.1 8083 $TEST_USER $TEST_PASSWORD
    - stage: docker build, deploy, and test
      services:
      - docker
      install:
        - true
      before_script:
      # Start CouchDB and Customer Containers and Create a Test User
      - bash scripts/start_customer.sh $HS256_KEY $COUCHDB_USER $COUCHDB_PASSWORD $TEST_USER $TEST_PASSWORD
      script:
      # Get Customer Container IP Address
      - CUSTOMER_IP_ADDRESS=$(docker inspect customer | jq -r '.[0].NetworkSettings.IPAddress')
      # Build Docker image
      - docker build -t "${IMAGE_NAME}:${TAG}" .
      # Start Auth Container and Connect to Customer Service
      - docker run --name auth -e CUSTOMERSERVICE_URL=http://${CUSTOMER_IP_ADDRESS}:8082 -e HS256_KEY=${HS256_KEY} -p 8083:8083 -d "${IMAGE_NAME}:${TAG}"
      # Wait for the Auth container to start accepting connections
      - sleep 25
      # Check that the Auth container is running
      - docker ps
      # Check logs to see if it started properly
      - docker logs auth
      # Run Auth API Test
      - bash scripts/api_tests.sh 127.0.0.1 8083 $TEST_USER $TEST_PASSWORD
    - stage: kubernetes build, deploy, and test
      services:
      - docker
      env:
      - CHANGE_MINIKUBE_NONE_USER=true
      install:
        - true
      before_script:
      # Install nsenter, which is needed for minikube to work
      - bash scripts/install_minikube_and_helm.sh
      # Install CouchDB Chart
      - helm upgrade --install couchdb --version 0.1.7 --set fullnameOverride=customer-couchdb,createAdminSecret=true,adminUsername=user,adminPassword=passw0rd,clusterSize=1,persistentVolume.enabled=false incubator/couchdb
      # Install Customer Chart
      - helm upgrade --install customer ibmcase-charts/customer
      script:
      # Build Docker image
      - docker build -t "${IMAGE_NAME}:${TAG}" .
      # Download Auth chart dependencies (MySQL)
      - cd chart/auth; helm dependency update; cd ../..
      # helm lint
      - helm lint chart/auth
      # helm package
      - helm package chart/auth
      # helm install Auth from packaged chart. Use pullPolicy=Never so it uses local docker image
      - CHART_VERSION="$(cat chart/auth/Chart.yaml | grep version | awk '{print $2}')"
      - helm upgrade --install auth --set service.type=NodePort,image.repository="${IMAGE_NAME}",image.tag="${TAG}",image.pullPolicy=Never,customer.url=http://customer-customer:8082 auth-${CHART_VERSION}.tgz
      # Wait for Auth to be ready
      - kubectl get deployments ${RELEASE_NAME}-auth -o yaml
      - READY=$(kubectl get deployments ${RELEASE_NAME}-auth -o yaml | grep "readyReplicas" | awk '{print $2}')
      - echo $READY
      - until [ -n "$READY" ] && [ ${READY} -ge 1 ]; do READY=$(kubectl get deployments ${RELEASE_NAME}-auth -o yaml | grep "readyReplicas" | awk '{print $2}'); kubectl get deployments -o wide; echo "Waiting for auth to be ready"; sleep 10; done
      # Wait for Auth deployment to start accepting connections
      - sleep 35
      # Run Auth API Test`
      - MINIKUBE_IP=$(minikube ip)
      - NODE_PORT=$(kubectl get service ${RELEASE_NAME}-auth -o=jsonpath='{.spec.ports[0].nodePort}')
      - bash scripts/api_tests.sh $MINIKUBE_IP $NODE_PORT $TEST_USER $TEST_PASSWORD